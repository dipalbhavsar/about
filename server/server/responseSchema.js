"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apolloSamples = exports.sagaSamples = void 0;
// export type Themes = {
//   [key in 'dark' | 'light']: {
//     main: string;
//     sub: string;
//   };
// };
// TODO: fix
// need to create babel-plugin
const sagaSamples = [{
  id: 1,
  code: process.env.NODE_ENV !== 'test' ? "import { END } from 'redux-saga';\r\nimport { put, call, take, select, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  setEnv,\r\n  resetPageStatus,\r\n  loadAppProcess as LoadAppProcess,\r\n  loadAppProcessSuccess,\r\n  loadAppProcessFailure,\r\n  loadTopPage as LoadTopPage,\r\n  loadTopPageSuccess,\r\n  loadTopPageFailure,\r\n  loadSagaPage as LoadSagaPage,\r\n  loadSagaPageSuccess,\r\n  loadSagaPageFailure,\r\n  loadApolloPage as LoadApolloPage,\r\n  loadApolloPageSuccess,\r\n  loadApolloPageFailure,\r\n  LOAD_APP_PROCESS,\r\n  LOAD_TOP_PAGE,\r\n  LOAD_SAGA_PAGE,\r\n  LOAD_APOLLO_PAGE\r\n} from '../actions/pages';\r\nimport {\r\n  fetchSagaCode,\r\n  fetchSagaCodeSuccess,\r\n  fetchSagaCodeFailure,\r\n  FETCH_SAGA_CODE_SUCCESS,\r\n  FETCH_SAGA_CODE_FAILURE\r\n} from '../actions/fetchSaga';\r\n\r\n// e.g. write common processing to be performed on all pages\r\n// don't call `stopSaga`\r\nfunction* appProcess(actions: ReturnType<typeof LoadAppProcess>) {\r\n  yield put(setEnv(process.env.NODE_ENV || 'development'));\r\n  yield put(loadAppProcessSuccess());\r\n}\r\n\r\n// if you run async process, you have to change the code like below\r\n// function* appProcess(actions: ReturnType<typeof LoadAppProcess>) {\r\n//   try {\r\n//     // async\r\n\r\n//     yield put(loadAppProcessSuccess());\r\n//   } catch (err) {\r\n//     yield put(loadAppProcessFailure(err));\r\n//   } finally {\r\n//     if (!process.env.IS_BROWSER) {\r\n//       yield call(stopSaga);\r\n//     }\r\n//   }\r\n// }\r\n\r\nfunction* loadTopPage(actions: ReturnType<typeof LoadTopPage>) {\r\n  yield changePage();\r\n  yield put(loadTopPageSuccess());\r\n\r\n  if (!process.env.IS_BROWSER) {\r\n    yield call(stopSaga);\r\n  }\r\n}\r\n\r\nfunction* loadSagaPage(actions: ReturnType<typeof LoadSagaPage>) {\r\n  try {\r\n    yield changePage();\r\n    yield put(fetchSagaCode(actions.payload.maxLength));\r\n\r\n    const res:\r\n      | ReturnType<typeof fetchSagaCodeSuccess>\r\n      | ReturnType<typeof fetchSagaCodeFailure> = yield take([\r\n      FETCH_SAGA_CODE_SUCCESS,\r\n      FETCH_SAGA_CODE_FAILURE\r\n    ]);\r\n\r\n    if (res.type === FETCH_SAGA_CODE_FAILURE) {\r\n      throw res.payload.err;\r\n    }\r\n\r\n    yield put(loadSagaPageSuccess());\r\n  } catch (err) {\r\n    yield put(loadSagaPageFailure(err));\r\n  } finally {\r\n    if (!process.env.IS_BROWSER) {\r\n      yield call(stopSaga);\r\n    }\r\n  }\r\n}\r\n\r\nfunction* loadApolloPage(actions: ReturnType<typeof LoadApolloPage>) {\r\n  yield changePage();\r\n  yield put(loadApolloPageSuccess());\r\n\r\n  if (!process.env.IS_BROWSER) {\r\n    yield call(stopSaga);\r\n  }\r\n}\r\n\r\nfunction* stopSaga() {\r\n  yield put(END);\r\n}\r\n\r\nfunction* changePage() {\r\n  // don't need to call resetPageStatus because baseUrl is required by fetch on Node.js environment,\r\n  // also state has already been initialized at this time\r\n  if (process.env.IS_BROWSER) {\r\n    yield put(resetPageStatus());\r\n  }\r\n}\r\n\r\nexport function* pagesProcess() {\r\n  yield takeLatest(LOAD_APP_PROCESS, appProcess);\r\n  yield takeLatest(LOAD_TOP_PAGE, loadTopPage);\r\n  yield takeLatest(LOAD_SAGA_PAGE, loadSagaPage);\r\n  yield takeLatest(LOAD_APOLLO_PAGE, loadApolloPage);\r\n}\r\n" : 'test-code',
  name: 'pages.tsx',
  likeCount: 0,
  description: 'aaaa'
}, {
  id: 2,
  code: process.env.NODE_ENV !== 'test' ? "import { END } from 'redux-saga';\r\nimport { put, call, take, select, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  setEnv,\r\n  resetPageStatus,\r\n  loadAppProcess as LoadAppProcess,\r\n  loadAppProcessSuccess,\r\n  loadAppProcessFailure,\r\n  loadTopPage as LoadTopPage,\r\n  loadTopPageSuccess,\r\n  loadTopPageFailure,\r\n  loadSagaPage as LoadSagaPage,\r\n  loadSagaPageSuccess,\r\n  loadSagaPageFailure,\r\n  loadApolloPage as LoadApolloPage,\r\n  loadApolloPageSuccess,\r\n  loadApolloPageFailure,\r\n  LOAD_APP_PROCESS,\r\n  LOAD_TOP_PAGE,\r\n  LOAD_SAGA_PAGE,\r\n  LOAD_APOLLO_PAGE\r\n} from '../actions/pages';\r\nimport {\r\n  fetchSagaCode,\r\n  fetchSagaCodeSuccess,\r\n  fetchSagaCodeFailure,\r\n  FETCH_SAGA_CODE_SUCCESS,\r\n  FETCH_SAGA_CODE_FAILURE\r\n} from '../actions/fetchSaga';\r\n\r\n// e.g. write common processing to be performed on all pages\r\n// don't call `stopSaga`\r\nfunction* appProcess(actions: ReturnType<typeof LoadAppProcess>) {\r\n  yield put(setEnv(process.env.NODE_ENV || 'development'));\r\n  yield put(loadAppProcessSuccess());\r\n}\r\n\r\n// if you run async process, you have to change the code like below\r\n// function* appProcess(actions: ReturnType<typeof LoadAppProcess>) {\r\n//   try {\r\n//     // async\r\n\r\n//     yield put(loadAppProcessSuccess());\r\n//   } catch (err) {\r\n//     yield put(loadAppProcessFailure(err));\r\n//   } finally {\r\n//     if (!process.env.IS_BROWSER) {\r\n//       yield call(stopSaga);\r\n//     }\r\n//   }\r\n// }\r\n\r\nfunction* loadTopPage(actions: ReturnType<typeof LoadTopPage>) {\r\n  yield changePage();\r\n  yield put(loadTopPageSuccess());\r\n\r\n  if (!process.env.IS_BROWSER) {\r\n    yield call(stopSaga);\r\n  }\r\n}\r\n\r\nfunction* loadSagaPage(actions: ReturnType<typeof LoadSagaPage>) {\r\n  try {\r\n    yield changePage();\r\n    yield put(fetchSagaCode(actions.payload.maxLength));\r\n\r\n    const res:\r\n      | ReturnType<typeof fetchSagaCodeSuccess>\r\n      | ReturnType<typeof fetchSagaCodeFailure> = yield take([\r\n      FETCH_SAGA_CODE_SUCCESS,\r\n      FETCH_SAGA_CODE_FAILURE\r\n    ]);\r\n\r\n    if (res.type === FETCH_SAGA_CODE_FAILURE) {\r\n      throw res.payload.err;\r\n    }\r\n\r\n    yield put(loadSagaPageSuccess());\r\n  } catch (err) {\r\n    yield put(loadSagaPageFailure(err));\r\n  } finally {\r\n    if (!process.env.IS_BROWSER) {\r\n      yield call(stopSaga);\r\n    }\r\n  }\r\n}\r\n\r\nfunction* loadApolloPage(actions: ReturnType<typeof LoadApolloPage>) {\r\n  yield changePage();\r\n  yield put(loadApolloPageSuccess());\r\n\r\n  if (!process.env.IS_BROWSER) {\r\n    yield call(stopSaga);\r\n  }\r\n}\r\n\r\nfunction* stopSaga() {\r\n  yield put(END);\r\n}\r\n\r\nfunction* changePage() {\r\n  // don't need to call resetPageStatus because baseUrl is required by fetch on Node.js environment,\r\n  // also state has already been initialized at this time\r\n  if (process.env.IS_BROWSER) {\r\n    yield put(resetPageStatus());\r\n  }\r\n}\r\n\r\nexport function* pagesProcess() {\r\n  yield takeLatest(LOAD_APP_PROCESS, appProcess);\r\n  yield takeLatest(LOAD_TOP_PAGE, loadTopPage);\r\n  yield takeLatest(LOAD_SAGA_PAGE, loadSagaPage);\r\n  yield takeLatest(LOAD_APOLLO_PAGE, loadApolloPage);\r\n}\r\n" : 'test-code',
  name: 'pages.tsx',
  likeCount: 0,
  description: 'aaaa'
}, {
  id: 3,
  code: process.env.NODE_ENV !== 'test' ? "import { END } from 'redux-saga';\r\nimport { put, call, take, select, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  setEnv,\r\n  resetPageStatus,\r\n  loadAppProcess as LoadAppProcess,\r\n  loadAppProcessSuccess,\r\n  loadAppProcessFailure,\r\n  loadTopPage as LoadTopPage,\r\n  loadTopPageSuccess,\r\n  loadTopPageFailure,\r\n  loadSagaPage as LoadSagaPage,\r\n  loadSagaPageSuccess,\r\n  loadSagaPageFailure,\r\n  loadApolloPage as LoadApolloPage,\r\n  loadApolloPageSuccess,\r\n  loadApolloPageFailure,\r\n  LOAD_APP_PROCESS,\r\n  LOAD_TOP_PAGE,\r\n  LOAD_SAGA_PAGE,\r\n  LOAD_APOLLO_PAGE\r\n} from '../actions/pages';\r\nimport {\r\n  fetchSagaCode,\r\n  fetchSagaCodeSuccess,\r\n  fetchSagaCodeFailure,\r\n  FETCH_SAGA_CODE_SUCCESS,\r\n  FETCH_SAGA_CODE_FAILURE\r\n} from '../actions/fetchSaga';\r\n\r\n// e.g. write common processing to be performed on all pages\r\n// don't call `stopSaga`\r\nfunction* appProcess(actions: ReturnType<typeof LoadAppProcess>) {\r\n  yield put(setEnv(process.env.NODE_ENV || 'development'));\r\n  yield put(loadAppProcessSuccess());\r\n}\r\n\r\n// if you run async process, you have to change the code like below\r\n// function* appProcess(actions: ReturnType<typeof LoadAppProcess>) {\r\n//   try {\r\n//     // async\r\n\r\n//     yield put(loadAppProcessSuccess());\r\n//   } catch (err) {\r\n//     yield put(loadAppProcessFailure(err));\r\n//   } finally {\r\n//     if (!process.env.IS_BROWSER) {\r\n//       yield call(stopSaga);\r\n//     }\r\n//   }\r\n// }\r\n\r\nfunction* loadTopPage(actions: ReturnType<typeof LoadTopPage>) {\r\n  yield changePage();\r\n  yield put(loadTopPageSuccess());\r\n\r\n  if (!process.env.IS_BROWSER) {\r\n    yield call(stopSaga);\r\n  }\r\n}\r\n\r\nfunction* loadSagaPage(actions: ReturnType<typeof LoadSagaPage>) {\r\n  try {\r\n    yield changePage();\r\n    yield put(fetchSagaCode(actions.payload.maxLength));\r\n\r\n    const res:\r\n      | ReturnType<typeof fetchSagaCodeSuccess>\r\n      | ReturnType<typeof fetchSagaCodeFailure> = yield take([\r\n      FETCH_SAGA_CODE_SUCCESS,\r\n      FETCH_SAGA_CODE_FAILURE\r\n    ]);\r\n\r\n    if (res.type === FETCH_SAGA_CODE_FAILURE) {\r\n      throw res.payload.err;\r\n    }\r\n\r\n    yield put(loadSagaPageSuccess());\r\n  } catch (err) {\r\n    yield put(loadSagaPageFailure(err));\r\n  } finally {\r\n    if (!process.env.IS_BROWSER) {\r\n      yield call(stopSaga);\r\n    }\r\n  }\r\n}\r\n\r\nfunction* loadApolloPage(actions: ReturnType<typeof LoadApolloPage>) {\r\n  yield changePage();\r\n  yield put(loadApolloPageSuccess());\r\n\r\n  if (!process.env.IS_BROWSER) {\r\n    yield call(stopSaga);\r\n  }\r\n}\r\n\r\nfunction* stopSaga() {\r\n  yield put(END);\r\n}\r\n\r\nfunction* changePage() {\r\n  // don't need to call resetPageStatus because baseUrl is required by fetch on Node.js environment,\r\n  // also state has already been initialized at this time\r\n  if (process.env.IS_BROWSER) {\r\n    yield put(resetPageStatus());\r\n  }\r\n}\r\n\r\nexport function* pagesProcess() {\r\n  yield takeLatest(LOAD_APP_PROCESS, appProcess);\r\n  yield takeLatest(LOAD_TOP_PAGE, loadTopPage);\r\n  yield takeLatest(LOAD_SAGA_PAGE, loadSagaPage);\r\n  yield takeLatest(LOAD_APOLLO_PAGE, loadApolloPage);\r\n}\r\n" : 'test-code',
  name: 'pages.tsx',
  likeCount: 0,
  description: 'aaaa'
}, {
  id: 4,
  code: process.env.NODE_ENV !== 'test' ? "import { END } from 'redux-saga';\r\nimport { put, call, take, select, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  setEnv,\r\n  resetPageStatus,\r\n  loadAppProcess as LoadAppProcess,\r\n  loadAppProcessSuccess,\r\n  loadAppProcessFailure,\r\n  loadTopPage as LoadTopPage,\r\n  loadTopPageSuccess,\r\n  loadTopPageFailure,\r\n  loadSagaPage as LoadSagaPage,\r\n  loadSagaPageSuccess,\r\n  loadSagaPageFailure,\r\n  loadApolloPage as LoadApolloPage,\r\n  loadApolloPageSuccess,\r\n  loadApolloPageFailure,\r\n  LOAD_APP_PROCESS,\r\n  LOAD_TOP_PAGE,\r\n  LOAD_SAGA_PAGE,\r\n  LOAD_APOLLO_PAGE\r\n} from '../actions/pages';\r\nimport {\r\n  fetchSagaCode,\r\n  fetchSagaCodeSuccess,\r\n  fetchSagaCodeFailure,\r\n  FETCH_SAGA_CODE_SUCCESS,\r\n  FETCH_SAGA_CODE_FAILURE\r\n} from '../actions/fetchSaga';\r\n\r\n// e.g. write common processing to be performed on all pages\r\n// don't call `stopSaga`\r\nfunction* appProcess(actions: ReturnType<typeof LoadAppProcess>) {\r\n  yield put(setEnv(process.env.NODE_ENV || 'development'));\r\n  yield put(loadAppProcessSuccess());\r\n}\r\n\r\n// if you run async process, you have to change the code like below\r\n// function* appProcess(actions: ReturnType<typeof LoadAppProcess>) {\r\n//   try {\r\n//     // async\r\n\r\n//     yield put(loadAppProcessSuccess());\r\n//   } catch (err) {\r\n//     yield put(loadAppProcessFailure(err));\r\n//   } finally {\r\n//     if (!process.env.IS_BROWSER) {\r\n//       yield call(stopSaga);\r\n//     }\r\n//   }\r\n// }\r\n\r\nfunction* loadTopPage(actions: ReturnType<typeof LoadTopPage>) {\r\n  yield changePage();\r\n  yield put(loadTopPageSuccess());\r\n\r\n  if (!process.env.IS_BROWSER) {\r\n    yield call(stopSaga);\r\n  }\r\n}\r\n\r\nfunction* loadSagaPage(actions: ReturnType<typeof LoadSagaPage>) {\r\n  try {\r\n    yield changePage();\r\n    yield put(fetchSagaCode(actions.payload.maxLength));\r\n\r\n    const res:\r\n      | ReturnType<typeof fetchSagaCodeSuccess>\r\n      | ReturnType<typeof fetchSagaCodeFailure> = yield take([\r\n      FETCH_SAGA_CODE_SUCCESS,\r\n      FETCH_SAGA_CODE_FAILURE\r\n    ]);\r\n\r\n    if (res.type === FETCH_SAGA_CODE_FAILURE) {\r\n      throw res.payload.err;\r\n    }\r\n\r\n    yield put(loadSagaPageSuccess());\r\n  } catch (err) {\r\n    yield put(loadSagaPageFailure(err));\r\n  } finally {\r\n    if (!process.env.IS_BROWSER) {\r\n      yield call(stopSaga);\r\n    }\r\n  }\r\n}\r\n\r\nfunction* loadApolloPage(actions: ReturnType<typeof LoadApolloPage>) {\r\n  yield changePage();\r\n  yield put(loadApolloPageSuccess());\r\n\r\n  if (!process.env.IS_BROWSER) {\r\n    yield call(stopSaga);\r\n  }\r\n}\r\n\r\nfunction* stopSaga() {\r\n  yield put(END);\r\n}\r\n\r\nfunction* changePage() {\r\n  // don't need to call resetPageStatus because baseUrl is required by fetch on Node.js environment,\r\n  // also state has already been initialized at this time\r\n  if (process.env.IS_BROWSER) {\r\n    yield put(resetPageStatus());\r\n  }\r\n}\r\n\r\nexport function* pagesProcess() {\r\n  yield takeLatest(LOAD_APP_PROCESS, appProcess);\r\n  yield takeLatest(LOAD_TOP_PAGE, loadTopPage);\r\n  yield takeLatest(LOAD_SAGA_PAGE, loadSagaPage);\r\n  yield takeLatest(LOAD_APOLLO_PAGE, loadApolloPage);\r\n}\r\n" : 'test-code',
  name: 'pages.tsx',
  likeCount: 0,
  description: 'aaaa'
}];
exports.sagaSamples = sagaSamples;
const apolloSamples = [{
  id: 1,
  code: process.env.NODE_ENV !== 'test' ? "import React, { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useQuery, useMutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nimport { loadApolloPage } from '../../../actions/pages';\r\nimport { Head } from '../../Head';\r\nimport { CodeSamplesBox } from '../../CodeSamplesBox';\r\nimport { Samples } from '../../../../server/responseSchema';\r\n\r\nexport const GET_SAMPLES = gql`\r\n  query getSamples($maxLength: Int) {\r\n    samples(maxLength: $maxLength) {\r\n      id\r\n      name\r\n      code\r\n      likeCount\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_LIKE = gql`\r\n  mutation addLike($id: Int) {\r\n    addLike(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Apollo = () => {\r\n  const dispatch = useDispatch();\r\n  const { search } = useLocation();\r\n  const maxLength = new URLSearchParams(search).get('max');\r\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery<{\r\n    samples: Samples;\r\n  }>(GET_SAMPLES, { variables: { maxLength: Number(maxLength) } });\r\n  const [\r\n    addLike,\r\n    { loading: mutationLoading, error: mutationError, data: mutationData }\r\n  ] = useMutation(ADD_LIKE, {\r\n    // need to optimize this because it's better to avoid fetching all data\r\n    refetchQueries: [{ query: GET_SAMPLES, variables: { maxLength: Number(maxLength) } }]\r\n  });\r\n  const like = useCallback((id: number) => {\r\n    addLike({ variables: { id } });\r\n    // if you want to use a local state variable, you have to specify it to `[]` because React captures this function\r\n  }, []);\r\n\r\n  // stop saga on Node.js\r\n  if (!process.env.IS_BROWSER) {\r\n    dispatch(loadApolloPage());\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head title=\"apollo-page\" />\r\n      <p>query: get all samples</p>\r\n      <p>mutation: add a like count</p>\r\n      {queryLoading && <p>loading...</p>}\r\n      {queryError && <p>error...</p>}\r\n      {queryData && <CodeSamplesBox samples={queryData.samples} addLike={like} />}\r\n    </>\r\n  );\r\n};\r\n" : 'test-code',
  name: 'apollo.tsx',
  likeCount: 0,
  description: 'aaaa'
}, {
  id: 2,
  code: process.env.NODE_ENV !== 'test' ? "import React, { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useQuery, useMutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nimport { loadApolloPage } from '../../../actions/pages';\r\nimport { Head } from '../../Head';\r\nimport { CodeSamplesBox } from '../../CodeSamplesBox';\r\nimport { Samples } from '../../../../server/responseSchema';\r\n\r\nexport const GET_SAMPLES = gql`\r\n  query getSamples($maxLength: Int) {\r\n    samples(maxLength: $maxLength) {\r\n      id\r\n      name\r\n      code\r\n      likeCount\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_LIKE = gql`\r\n  mutation addLike($id: Int) {\r\n    addLike(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Apollo = () => {\r\n  const dispatch = useDispatch();\r\n  const { search } = useLocation();\r\n  const maxLength = new URLSearchParams(search).get('max');\r\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery<{\r\n    samples: Samples;\r\n  }>(GET_SAMPLES, { variables: { maxLength: Number(maxLength) } });\r\n  const [\r\n    addLike,\r\n    { loading: mutationLoading, error: mutationError, data: mutationData }\r\n  ] = useMutation(ADD_LIKE, {\r\n    // need to optimize this because it's better to avoid fetching all data\r\n    refetchQueries: [{ query: GET_SAMPLES, variables: { maxLength: Number(maxLength) } }]\r\n  });\r\n  const like = useCallback((id: number) => {\r\n    addLike({ variables: { id } });\r\n    // if you want to use a local state variable, you have to specify it to `[]` because React captures this function\r\n  }, []);\r\n\r\n  // stop saga on Node.js\r\n  if (!process.env.IS_BROWSER) {\r\n    dispatch(loadApolloPage());\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head title=\"apollo-page\" />\r\n      <p>query: get all samples</p>\r\n      <p>mutation: add a like count</p>\r\n      {queryLoading && <p>loading...</p>}\r\n      {queryError && <p>error...</p>}\r\n      {queryData && <CodeSamplesBox samples={queryData.samples} addLike={like} />}\r\n    </>\r\n  );\r\n};\r\n" : 'test-code',
  name: 'apollo.tsx',
  likeCount: 0,
  description: 'aaaa'
}, {
  id: 3,
  code: process.env.NODE_ENV !== 'test' ? "import React, { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useQuery, useMutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nimport { loadApolloPage } from '../../../actions/pages';\r\nimport { Head } from '../../Head';\r\nimport { CodeSamplesBox } from '../../CodeSamplesBox';\r\nimport { Samples } from '../../../../server/responseSchema';\r\n\r\nexport const GET_SAMPLES = gql`\r\n  query getSamples($maxLength: Int) {\r\n    samples(maxLength: $maxLength) {\r\n      id\r\n      name\r\n      code\r\n      likeCount\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_LIKE = gql`\r\n  mutation addLike($id: Int) {\r\n    addLike(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Apollo = () => {\r\n  const dispatch = useDispatch();\r\n  const { search } = useLocation();\r\n  const maxLength = new URLSearchParams(search).get('max');\r\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery<{\r\n    samples: Samples;\r\n  }>(GET_SAMPLES, { variables: { maxLength: Number(maxLength) } });\r\n  const [\r\n    addLike,\r\n    { loading: mutationLoading, error: mutationError, data: mutationData }\r\n  ] = useMutation(ADD_LIKE, {\r\n    // need to optimize this because it's better to avoid fetching all data\r\n    refetchQueries: [{ query: GET_SAMPLES, variables: { maxLength: Number(maxLength) } }]\r\n  });\r\n  const like = useCallback((id: number) => {\r\n    addLike({ variables: { id } });\r\n    // if you want to use a local state variable, you have to specify it to `[]` because React captures this function\r\n  }, []);\r\n\r\n  // stop saga on Node.js\r\n  if (!process.env.IS_BROWSER) {\r\n    dispatch(loadApolloPage());\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head title=\"apollo-page\" />\r\n      <p>query: get all samples</p>\r\n      <p>mutation: add a like count</p>\r\n      {queryLoading && <p>loading...</p>}\r\n      {queryError && <p>error...</p>}\r\n      {queryData && <CodeSamplesBox samples={queryData.samples} addLike={like} />}\r\n    </>\r\n  );\r\n};\r\n" : 'test-code',
  name: 'apollo.tsx',
  likeCount: 0,
  description: 'aaaa'
}, {
  id: 4,
  code: process.env.NODE_ENV !== 'test' ? "import React, { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useQuery, useMutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nimport { loadApolloPage } from '../../../actions/pages';\r\nimport { Head } from '../../Head';\r\nimport { CodeSamplesBox } from '../../CodeSamplesBox';\r\nimport { Samples } from '../../../../server/responseSchema';\r\n\r\nexport const GET_SAMPLES = gql`\r\n  query getSamples($maxLength: Int) {\r\n    samples(maxLength: $maxLength) {\r\n      id\r\n      name\r\n      code\r\n      likeCount\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_LIKE = gql`\r\n  mutation addLike($id: Int) {\r\n    addLike(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Apollo = () => {\r\n  const dispatch = useDispatch();\r\n  const { search } = useLocation();\r\n  const maxLength = new URLSearchParams(search).get('max');\r\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery<{\r\n    samples: Samples;\r\n  }>(GET_SAMPLES, { variables: { maxLength: Number(maxLength) } });\r\n  const [\r\n    addLike,\r\n    { loading: mutationLoading, error: mutationError, data: mutationData }\r\n  ] = useMutation(ADD_LIKE, {\r\n    // need to optimize this because it's better to avoid fetching all data\r\n    refetchQueries: [{ query: GET_SAMPLES, variables: { maxLength: Number(maxLength) } }]\r\n  });\r\n  const like = useCallback((id: number) => {\r\n    addLike({ variables: { id } });\r\n    // if you want to use a local state variable, you have to specify it to `[]` because React captures this function\r\n  }, []);\r\n\r\n  // stop saga on Node.js\r\n  if (!process.env.IS_BROWSER) {\r\n    dispatch(loadApolloPage());\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head title=\"apollo-page\" />\r\n      <p>query: get all samples</p>\r\n      <p>mutation: add a like count</p>\r\n      {queryLoading && <p>loading...</p>}\r\n      {queryError && <p>error...</p>}\r\n      {queryData && <CodeSamplesBox samples={queryData.samples} addLike={like} />}\r\n    </>\r\n  );\r\n};\r\n" : 'test-code',
  name: 'apollo.tsx',
  likeCount: 0,
  description: 'aaaa'
}];
exports.apolloSamples = apolloSamples;