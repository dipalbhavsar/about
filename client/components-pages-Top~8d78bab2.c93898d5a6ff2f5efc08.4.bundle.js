(window.__LOADABLE_LOADED_CHUNKS__=window.__LOADABLE_LOADED_CHUNKS__||[]).push([[4],{"./src/client/components/Head/index.ts":function(r,n,e){"use strict";var s=e("./node_modules/react/index.js"),t=e("./node_modules/react-helmet/lib/Helmet.js"),a=e.n(t),o=function(r){var n=r.title,e=r.color,t=void 0===e?"#3498db":e;return s.createElement(a.a,null,s.createElement("title",null,n),s.createElement("meta",{name:"theme-color",content:t}))};e.d(n,"a",(function(){return o}))},"./src/client/components/pages/Top/index.ts":function(r,n,e){"use strict";e.r(n);e("./node_modules/core-js/modules/es.array.slice.js"),e("./node_modules/core-js/modules/es.object.freeze.js");var s=e("./node_modules/react/index.js"),t=e.n(s),a=e("./node_modules/react-redux/es/index.js"),o=e("./node_modules/react-markdown/lib/react-markdown.js"),i=e.n(o),c=e("./node_modules/styled-components/dist/styled-components.browser.esm.js"),p=e("./src/client/actions/pages.ts"),l=e("./src/client/components/Head/index.ts");function d(){var r=function(r,n){n||(n=r.slice(0));return Object.freeze(Object.defineProperties(r,{raw:{value:Object.freeze(n)}}))}(["\n  margin: auto;\n  width: 80%;\n\n  & pre {\n    background: #333;\n    color: #f5f5f5;\n    padding: 4px 12px;\n    overflow: auto;\n  }\n"]);return d=function(){return r},r}var u=c.b.div(d());n.default=function(){return Object(a.b)()(Object(p.k)()),t.a.createElement(t.a.Fragment,null,t.a.createElement(l.a,{title:"top-page"}),t.a.createElement("section",null,t.a.createElement(u,null,t.a.createElement(i.a,{source:'# A minimum sample of Server-Side-Rendering, Single-Page-Application, and Progressive Web App\r\n\r\n## What\'s this project?\r\n\r\nThis project introduces how to implement SSR, SPA, and PWA.\r\n\r\n### Articles\r\n\r\nonly Japanese\r\n\r\n- [SPA + SSR + PWA の作り方とセキュリティについて](https://blog.hiroppy.me/entry/ssr-sample_2)\r\n- [業務で使える簡単な SSR + SPA のテンプレートを公開した](http://blog.hiroppy.me/entry/ssr-sample)\r\n\r\n## Feature\r\n\r\nThis project shows several implementations like below.\r\n\r\n- Server Side Rendering\r\n- Single Page Application\r\n- Progressive Web App\r\n- GraphQL\r\n- RESTful API\r\n- Security (CSP, GraphQL)\r\n- Testing\r\n- Infra like the building tools\r\n- Measuring performance\r\n\r\n## Libraries\r\n\r\n### Dependencies\r\n\r\n| Name                | Purpose                | CSR | SSR | Note |\r\n| ------------------- | ---------------------- | --- | --- | ---- |\r\n| react               | view                   | yes | yes |      |\r\n| redux               | architecure            | yes | yes |      |\r\n| react-router        | routing                | yes | yes |      |\r\n| react-helmet        | head tag               | yes | yes |      |\r\n| redux-saga          | side effects           | yes | yes |      |\r\n| styled-components   | CSS in JS              | yes | yes |      |\r\n| loadable-components | dynamic import         | yes | yes |      |\r\n| apollo-boost        | GraphQL                | yes | yes |      |\r\n| express             | server side framework  | N/A | yes |      |\r\n| nanoid              | Creating a random hash | N/A | N/A |      |\r\n\r\n### DevDependencies\r\n\r\n| Name              | Purpose                                      | Note |\r\n| ----------------- | -------------------------------------------- | ---- |\r\n| typescript        | Alt                                          |      |\r\n| webpack           | a bundler for client side                    |      |\r\n| babel             | transpile typescript and loadable-components |      |\r\n| storybook         | preview                                      |      |\r\n| storyshots        | snapshot tests                               |      |\r\n| jest              | test runner                                  |      |\r\n| testing-library   | a helper to test react                       |      |\r\n| nodemon           | a watcher for server side                    |      |\r\n| prettier          | formatter                                    |      |\r\n| typescript-eslint | linter                                       |      |\r\n| workbox           | service worker                               |      |\r\n| clinic            | performance profiling                        |      |\r\n| autocannon        | benchmarking tool                            |      |\r\n\r\n## Pages\r\n\r\nSee the router: [src/client/router/](src/client/router/).\r\n\r\nThis application has 3 pages and creates SPA based on redux and redux-saga.  \r\nSaga page and Apollo page use same components so you can compare each implementation.\r\n\r\n### Top\r\n\r\nThis page reads README.md using `babel-plugin-macro`.\r\n\r\nsrc: [src/client/components/pages/Top](src/client/components/pages/Top)\r\n\r\n### Saga\r\n\r\nThis page runs just redux-saga application.\r\n\r\npage src: [src/client/components/pages/Saga](src/client/components/pages/Saga)\r\n\r\n### Apollo\r\n\r\nThis page runs just apollo application.\r\n\r\npage src: [src/client/components/pages/Apollo](src/client/components/pages/Apollo)\r\n\r\n## Control SSR and SPA\r\n\r\ndesign concept: [gist](https://gist.github.com/hiroppy/9b5daf8da5cd639a62a917d536f5dfc5)  \r\nsrc: [src/client/sagas/pages.ts](src/client/sagas/pages.ts)\r\n\r\nAll pages fork saga processes.\r\n\r\n- `appProcess`\r\n  - a common processing to execute on all pages(e.g. confirming login, sending to GA, etc...)\r\n- pages\r\n  - `loadTopPage`, `loadingApolloPage`\r\n    - just stop saga when it ran at a server\r\n  - `loadSagaPage`\r\n    - fetching data and then stopping if it ran at a server\r\n\r\n`appProcess` and `pages` run in parallel, also they run the same code in a server and client.\r\n\r\n**Need to call `END` when running on Node.js**\r\n\r\nIf you do SSR using redux-saga, you have to stop redux-saga process when all processes are finished.\r\n\r\n```js\r\ntry {\r\n  // fetch...\r\n\r\n  yield put(success());\r\n} catch (err) {\r\n  yield put(failure(err));\r\n} finally {\r\n  if (!process.env.IS_BROWSER) {\r\n    yield put(END);\r\n  }\r\n}\r\n```\r\n\r\n## Global Variables\r\n\r\nsrc: [src/server/controllers/renderer/renderer.tsx](src/server/controllers/renderer/renderer.tsx).\r\n\r\nUse the following variables to pass data acquired by a server to the client side.\r\n\r\n### `data-json`\r\n\r\nThis script tag has state and data which are fetched via redux-saga, etc at the server.\r\n\r\n`<script id="initial-data" type="text/plain" data-json=...><\/script>`.\r\n\r\n### `window.__APOLLO_STATE__`\r\n\r\nThis variable has GraphQL data which are fetched at the server.\r\n\r\n## Lighthouse\r\n\r\n![lighthouse](./assets/lighthouse.png)\r\n\r\nIf you want to get 100 point for Best Practices, you need to set a reverse proxy server like Nginx because Express hasn\'t implemented http/2 yet.(also Performance)\r\n\r\n## Setup\r\n\r\n```sh\r\n$ git clone git@github.com:hiroppy/ssr-sample.git\r\n$ cd ssr-sample\r\n$ npm i\r\n```\r\n\r\n## Development\r\n\r\n```sh\r\n$ npm start\r\n$ open http://localhost:3000\r\n\r\n# GraphQL Playground\r\n$ open http://localhost:3000/graphql\r\n```\r\n\r\n## Storybook\r\n\r\n```sh\r\n$ npm run start:storybook\r\n$ open http://localhost:6006\r\n```\r\n\r\n## Test\r\n\r\n```sh\r\n$ npm test\r\n```\r\n\r\n## Production\r\n\r\n```sh\r\n$ npm run build             # npm run build:client + npm run build:server\r\n$ npm run start:prod        # run server and use 3000\r\n$ open http://localhost:8080\r\n```\r\n\r\n## Deploy\r\n\r\n```sh\r\n$ npm run deploy:storybook\r\n```\r\n\r\n## Performance\r\n\r\n```sh\r\n$ npm run build\r\n$ npm run start:prod\r\n$ npm run benchmark # rps\r\n\r\nRunning 10s test @ http://localhost:8080\r\n100 connections\r\n\r\n┌─────────┬────────┬────────┬────────┬─────────┬───────────┬───────────┬────────────┐\r\n│ Stat    │ 2.5%   │ 50%    │ 97.5%  │ 99%     │ Avg       │ Stdev     │ Max        │\r\n├─────────┼────────┼────────┼────────┼─────────┼───────────┼───────────┼────────────┤\r\n│ Latency │ 161 ms │ 406 ms │ 829 ms │ 1277 ms │ 413.26 ms │ 191.69 ms │ 2649.38 ms │\r\n└─────────┴────────┴────────┴────────┴─────────┴───────────┴───────────┴────────────┘\r\n┌───────────┬─────────┬─────────┬─────────┬─────────┬─────────┬────────┬─────────┐\r\n│ Stat      │ 1%      │ 2.5%    │ 50%     │ 97.5%   │ Avg     │ Stdev  │ Min     │\r\n├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼────────┼─────────┤\r\n│ Req/Sec   │ 210     │ 210     │ 233     │ 264     │ 236.6   │ 18.87  │ 210     │\r\n├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼────────┼─────────┤\r\n│ Bytes/Sec │ 3.16 MB │ 3.16 MB │ 3.51 MB │ 3.98 MB │ 3.56 MB │ 284 kB │ 3.16 MB │\r\n└───────────┴─────────┴─────────┴─────────┴─────────┴─────────┴────────┴─────────┘\r\n\r\nReq/Bytes counts sampled once per second.\r\n\r\n$ npm run benchmark:flame # flamegraph\r\n```\r\n\r\n![flamegraph](./assets/flamegraph.png)\r\n\r\n## Note\r\n\r\nThis repository shows how to write and so does not introduce Atomic Design.\r\n'}))))}}}]);